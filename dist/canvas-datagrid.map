{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 5fdf22ab30885d22570c","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","style","width","height","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","requestAnimationFrame","resize","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","canvas","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","parentNodeStyle","supressDrawAndEvent","reloadStoredValues","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","blur","TypeError","currentCursor","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","trArgs","treeGridAttributes","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAiRCE,MAjRDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,0BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('section');\n        }\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            if (self.intf.tagName === 'SECTION') {\n                // required for non custom tag browsers\n                self.intf.style.height = '100%';\n                self.intf.style.width = '100%';\n            }\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5fdf22ab30885d22570c","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('section');\n        }\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            if (self.intf.tagName === 'SECTION') {\n                // required for non custom tag browsers\n                self.intf.style.height = '100%';\n                self.intf.style.width = '100%';\n            }\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}